NEXT.js Ke Do Main Concepts

(1)Routing
(2)Components

////////////****************************************************************************************************************//////////////////$

1. Routing
Routing = Pages

Jab hum apni website run karte hain, toh pehle tsconfig file read hoti hai. Uske baad src folder mein jo layout.tsx file hoti hai,
 usay read karta hai, aur phir page.tsx file ko read karke kaam karta hai.

page.tsx******

App ke folder mein jo page.tsx file hoti hai, wo hamara front page hota hai.
Yeh bana banaya page hota hai jo humein milta hai aur isi ka URL web par localhost:3000 ke name se hota hai.
Routing ka aik rule hota hai ke jo folder ka naam hota hai, wo route banta hai, yaani URL web ka.
Jaise index.html ko jab live server par kholta hain, toh uska URL mein index.html likha hota hai. Magar Next.js mein routing folder 
ke naam par hoti hai.

Routing ke Types

rout jb bhi hm bnay gy static ho nested ho ya koi bhi ho lekin oski file ka name page.tsx hi hoga lazmi

Static Routing********

App ke andar aik folder hota hai, aur uske andar aik page hota hai (tsx file).
Agar app ke andar 10 folders bhi hon, aur har folder ka apna page.tsx ho, toh yeh static routing hoti hai.

Nested Routing***********

App ke andar aik folder hota hai, jisme aik page.tsx file hoti hai. Is folder ke andar ek aur folder ho aur phir usmein bhi aik page.tsx ho, 
aur aise 10 nested folders bhi hon bhaly , toh yeh nested routing kehlati hai.

Dynamic Routing
Is approach mein hum pehle ek folder aur file banate hain, phir usi folder ke andar ek aur nested folder aur
file banate hain. Lekin, jo nested folder hota hai, usko hum [] brackets mein rakhte hain. Jab hum [] mein folder
ya route banate hain, to ye ek dynamic route ban jata hai.
Dynamic routing ka faida ye hota hai ke jab hum URL (localhost3000/staticfoldername/) ke aage kuch bhi
 likh dete hain, chahe wo "233" ho ya "abc", (localhost3000/staticfoldername/1232222323232)
aur enter karte hain, to humein wahi page milta hai nested wla . Bhale hi hum URL me kuch bhi likh 
den, ye humein page not found ka error nahi dega, balke humein usi nested page pe le ayega.
Lekin, URL mein static folder+page.tsx ka pehle se hona zaroori hai. Static folder ka matlab hai jo file hum pehle  component 
mein banate hain. Us static route ke baad hum kuch bhi likh ke daal sakte hain, aur wo URL ke through params
 (parameters) mein aata hai.

Dynamic Routing Example:
Jab bhi hum URL me kuch add karte hain, wo values props mein params ke andar aati hain. lekin params srif dynamic 
rout me hi work krta he Hum {params.nestedFolderKaName} 
ki tarah is dynamic value ko page pe kahi bhi display kar sakte hain.
Iska faida ye hota hai ke jab bhi koi user URL me kuch type karega, wo value page me nested
 folder ke kisi bhi sentence ke sath display ho jayegi. Static route ka naam URL ke segment ke tor pe kaam karta hai.

GROUP ROUTHING
Iska maqsad hota hai ke hum alag alag routes banate hain or agr on me bhut sy routs ka aps me link hota he to  Next.js mein routes default tor par alphabetical order mein arrange hote hain. Agar humne 3 routes banaye hain aur unka aapas mein taluq hai, jaise signin, changepassword, aur login pages ka,alphabetically dekha jaye, to yeh alag alag jagah par dikhenge   kyun ke ek 's' se shuru ho raha hai, doosra 'c' se, aur teesra 'l' se. Is wajah se routes aage pichay ho jayenge aur humein unhein dhoondhna mushkil hoga. Is masle ke hal ke liye hum group routing ka istemal karte hain.

Hum ek folder banate hain jisme yeh sab related routes rakhe jate hain, is tarah se routes grouped aur organized ho jate hain.or hm folder (home) round () ke sath bnaty hen tabhi wo group rout mna jata he.

or hmy grout rout ko  URL mein (home) likhne ki zarurat nahi, balke seedha login ya koi bhi andar wali file ka naam likhne par route access ho jata hai.

_PRIVET
Agar hum folder ka naam _ se shuru karte hain, jaise _home, to wo folder private ho jata hai aur use directly URL mein access nahi kiya ja sakta, chahe folder ka naam sahi bhi ho.

Hum "public" aur "private" routing ko manage karte hain. Is mein, hum app ke folder mein ek "public" aur ek "private"
 naam ka folder banate hain. In folders ke andar hum (files) pages rakhte hain. Iska faida ye hota hai ke jab hum 
 localhost:3000 pe jaake kisi folder ka naam likhte hain, jaise "public" ke kisi folder ko  ya "private", ke to Next.js 
 automatically us folder ka page load kar leta hai. Hume manually (localhost3000/privat/foldername) ye nahi likhna padta 
 ke "private" ya "public" folder mein jana hai Next.js khud hi privat ko public me jakr folder ka name find krta he or osko
 lekr ata he esy (localhost3000/foldername)


(1)PRIVET ROUTHING
(2)PUBLIC ROUTHING               
Private Routing
        Private routing mein hum kuch files authorize karte hain jo sirf admin access kar sakta
 hai, ya woh banda jise admin ne explicit permission di ho. Admin decide karta hai ke kaunsi 
 file sirf uske liye visible hogi aur kaunsi file uske aur uske khaas bandon ke liye bhi dikhayi degi. 
 Is routing mein, hum sensitive data ko secure rakhte hain aur sirf authorized users ko access dete hain.

Public Routing
Public routing mein jo bhi content hota hai, wo sab users ke liye accessible hota hai, chahe wo
 authorized ho ya nahi. Normal users, jo website par aate hain, sab kuch dekh sakte hain. Yani ke ye content 
 sab ke liye khula hota hai.

ALL SAGMENT ROUTHING

Iska folder hum aise banate hain: [...last]

Isme yeh hota hai ke hum jaise dynamic route banate hain aur / ke baad kuch bhi likh dein, 
toh wo humein error nahi deta, balke usi page par rakhta hai. Lekin kuch likhne ke baad dobara / 
laga kar hum kuch likhenge, toh wo error dega. Us error ko hum all segment ki madad se solve karte hain. 
Yani isme yeh hoga ke hum / likhen, kuch likhen, phir / likh kar kuch aur likhen, kitna bhi likh lein,
 wo error nahi dega aur usi page mein rakhega..

 Example
  (localhost3000/staticfoldername/1212/dgdgf/454656/ghghj55/557).

////////////****************************************************************************************************************//////////////////$

2. Components
Components = Client-side & Server-side

Hum apne components ko page.tsx mein run karte hain.
Hum kisi component ko self-closing tag mein use kar sakte hain, lekin agar usay pair tag ke andar use karein aur kisi aur component ko 
bhi uske andar chalayen, toh wo as an argument pass hoga.Jis component ko hum pair tag ke andar pass karte hain, usay props ki madad se
 pakar sakte hain.Layout mein jo children likha hota hai, wo bhi props ka aik element hota hai. Agar hum directly props na likhein
 aur children likh dein, toh bhi chal jata hai.

Props (Parameters)

Props basic taur par aik object hota hai jisme multiple cheezein hoti hain, jaise children, params, etc.
Jab hum children ko layout mein pakarte hain, toh hum h1 ya kisi aur tag mein use kar sakte hain, kyun ke yeh props ka 
destructured element hota hai.

or hm alag argumeny bnay phir alag perameter den phir osko use krty hen to agr zada paremeter hongy jesy 10
to wo bhut phel jata ko to hm krty ye hen ke hm osko ak data me pass krdety hen object ki sorat me jesy

( arguments) <Hi/ data={{name:faiza ,age:18,city:karachi}}/> esy to hmara code cover ho jayga or {{} do isi liye lagaty hen ak object ka or dosra typescript hm {ismy likhty hen tsx me}}

(perameters) function HI ({props}:any{ data :{name,age,city}}){return <h1>my name is {props.data.name} }

or hm data ko destucture bhi kr skty hen or wo esy hoga ke hm props ki jga data  likh k props ko destructur kr skty hen jesy

(perameters) function HI ({data}:any{ data :{name,age,city}}){return <h1>my name is {data.name} } ab use krty wy props likhny ki need nhi he



**************************************************$ 

Client-side & Server-side Components

Yeh dono components hotay hain, lekin default mein component server-side hota hai. Hum use client-side bana sakte hain.

Client-side Rendering

Yeh browser ke andar hota hai, jaise Google Chrome.or iska kam browser pr nazr ata he node js pr ni ata
Jab hooks ka use hota hai, toh component ko client-side banana hota hai, kyunki browser hooks ko samajhta hai.
ismy hm jo bhi kam krty wo foran osko browser pr bhej deta he ke isko chalao or set kro

Server-side Rendering

Yeh Node.js ke andar hota hai aur hooks ko nahi samajhta.or ye ak trha sy code read krny ke kam ata he kioky jb hm khi sy api call kren ya koch bhi to hmy osko bna kr pora phir broswer pr dekhna hoa lekin kioky ke dikhta he node js me to hm phly cheq krlengy ke data aya he ke nhi aya 
Agar aap use client na likhein, toh component server-side render hoga, aur hooks kaam nahi karenge. Isliye hooks ko samjhane ke 
liye use client likhna hota hai.or iska kam nodejs me nazr ata he broswer me nhi ,ye sara kam khod node js me kr leta he node js me phir broshwer ko bheta he set krky

////////////****************************************************************************************************************//////////////////$

ERROR PAGE 

Jaise hum kuch ghalat URL likh kar enter karte hain, toh wo humein ek error ka page dikhata hai. Us error page ko hum 
khud bhi bana sakte hain. Matlab agar koi ghalat URL likhe, toh Next.js wala default error page na aaye, balke humara banaya
 hua custom error page aaye.

Isko hum aise banayenge ke direct app mein file banayenge not-found.tsx se, aur usme bilkul waise hi component banayenge jaise baaqi
 components banate hain. Bas h1 mein kuch bhi likh denge, ya jo chaahein wo us page mein likh sakte hain. Jab bhi error aayega, toh wo
  humare banaye hue page ko show karega.

Iska ek aur tareeqa bhi hota hai ke Next.js ke paas built-in notFound ka function hota hai. Hum agar chahte hain ke yeh error page kisi
 specific folder ke andar kaam kare, toh hum us folder mein ek not-found.tsx file bana sakte hain. Phir us folder ke page.tsx file mein 
 jaake notFound function ko import karwaenge, aur phir usko chalayenge ya if-else condition laga denge ke agar koi error ho, toh yeh function
  chala dena.

Jab yeh function chalega, toh wo us page ko dikhayega jo humne ussi folder ke not-found.tsx file mein banaya hoga. Aur is tareeqe se hum 
ek not-found.tsx file folder ke andar aur ek app ke andar bhi bana sakte hain. Iska fayda yeh hoga ke jis folder ke andar error aayega,
 toh us folder ka notFound function chalega. Agar kisi doosre file ya folder mein error aayega, toh app ke andar wali not-found.tsx file 
 ka function chal jaayega.

Is tareeqe se hum folder-specific aur global-level error handling kar sakte hain.


Globals.css
src folder ke andar globals.css jo bhi likha hota hai, wo saare pages par apply hota hai.
Layout.tsx
Is file mein jo likha hota hai, wo constant hota hai aur har page mein apply hota hai. Jaise agar footer likha ho, toh wo har page par
 dikhai dega.Children Yeh layout.tsx mein likha hota hai aur props ka ek element hota hai. Har component jo layout mein as
 a child pass hota hai, use children se represent karte hain.



////////////**********************************************************************************************************#$

IMAGE
Next.js mein image ka apna tag use karna hota hai, HTML wala img tag use karne se mana karta hai. Isme hum / dekar URL likhte hain
 (basic usage). Aur hum picture ko hamesha public ke folder mein rakhenge.

Image tag ko hum self-closing tag ke tor par use karte hain, aur isko import karwana zaroori hota hai. height, width, alt, aur src 
dena bhi lazmi hota hai.

Height aur width ke liye image ka apna tag hota hai, isme humein CSS ya Tailwind ki zaroorat nahi hoti.

   Link
   Jaise HTML mein hum anchor tag (<a>) ka use karte hain, Next.js mein Link component use karte hain.
   Link ke andar href={"/"} likh kar, home page ka route set kiya jaata hai.   


   Layout
   Hamari layout file mein children ka parameter hota hai jo hamari page.tsx ko run karta hai aur kyun ke woh bilkul 
   bahar app ke folder mein hota hai, isi liye woh sab page.tsx ki files ko run kar deta hai. Ham chahen toh khud ki 
   layout ki file bhi bana sakte hain.
   Magar agar ham kisi route ke andar layout ki file banate hain, toh woh sirf usi route ko chalayegi, baaqi kisi route 
   par woh kaam nahi karegi.
   Ham ek kaam zaroor kar sakte hain ke ham 4-8 jitne bhi routes banayein aur unko group route mein rakh dein. Aur andar 
   walay routes se bahar aur group route ke andar ek layout ki file banayenge, toh woh sab par apply hogi, chahe andar 
   walay layout mein jitne bhi routes hoon.
   
   Layout ki file mein hota hai ek metadata jismein ek title aur ek description hota hai. Description toh humein inspect 
   karke dikhai deta hai, lekin title woh hota hai jo normal HTML file mein hum title banate hain, toh woh page ka naam 
   ban jata hai. Isi tarah hum apna layout alag bana kar uske title ko apne page ke hisaab se naam de sakte hain.

   link import 
  Jab hum apni khud
    ki banayi hui files ko import karte hain, to hum relative paths ka use karte hain jese @ ,./  ya ../ 
  . Ye relative paths batate hain ke file kahan se uthani hai.
   Example
   import MyComponent from './components/MyComponent';

   Lekin jab hum kisi external library ko import karte hain, jaise React ya Inquirer, 
   to uska import path thoda different hota hai. Usme relative path (@ ,./  ya ../ ) nahi hota, kyun ke wo already
    node_modules folder se fetch hota hai, aur hum direct uska naam likhte hain.
   Example
   import React from 'react';
   import inquirer from 'inquirer';
   
   to in dono me hm apni bnai wi files ko nichy or inquirer react wali ko hmesha oper rakhty hen

////////////**********************************************************************************************************#$

npm run dev:

Jab aap npm run dev chalate hain, to aapki website development mode mein hoti hai. Iska matlab hai ke aap apni website ko
 live dekh sakte hain, jahan changes realtime reflect hotay hain. Aap apni website ko developer ke taur par dekh rahe hote
  hain, aur koi bhi user is version ko directly nahi dekh sakta. Ye sirf local environment ke liye hoti hai jahan aap asani
 se testing aur development kar sakte hain Development mode mein, tools jese hot reloading aur debugging ki madad hoti hai
 jo aapko asani se changes check karne aur problems ko solve karne mein madad dete hain.

npm run build:

Jab aap npm run build chalate hain, to aapki website production mode mein convert hoti hai. Iska matlab hai ke aapka code 
optimize ho jata hai aur deploy karne ke liye ready hota hai.Is build ko aap server ya kisi hosting platform par dal kar 
live kar sakte hain, npm run build se aapki 
website ka final version banta hai, jahan sari cheezain compress aur optimize ho chuki hoti hain taake website fast aur
efficient chale.lekin ye user ko dikhti nhi he blky ye hm as a user dekhry hoty hen

npm run start
Isay hum tab use karte hain jab sab kuch ho jata hai, aur npm run build se bhi dekh liya hota hai. 
Ab publish karna ya deploy karna hota hai, to hum npm run start chalate hain. Ye command chalane se website user ke 
liye Google par a jati hai, aur user ab URL dal kar search bhi kar sakta hai.

Errors in npm run dev vs npm run build:

Kuch errors aise hotay hain jo npm run dev mein show nahi hotay kyunke development mode mein kuch features relaxed hote hain.
Lekin jab aap npm run build chalate hain, to stricter checks hote hain, jisme aapko optimization aur code errors dekhne 
ko mil sakte hain. Ye errors production mode mein fix karna zaroori hota hai taake live version mein koi issues na aayein.

Deployment: 
Jab sab kuch sahi ho jata hai, to aap apni website ko deploy karte hain. Deployment ka matlab hai ke aap apne build 
files ko kisi hosting service (jaise ke Netlify, Vercel, GitHub Pages, Heroku, ya AWS) par upload karte hain. Isse aapki
 website live ho jati hai, aur koi bhi user internet par isko access kar sakta hai.


////////////**********************************************************************************************************#$
LOOPING
    looping matlb normal wala loop jo typecript me kisi chiz ko bar bar chalany ke liye kam  ata he esy hi hm html me bhi use kr skty hen yani tsx me 
example
    kisi component me ak array bnaya 
let array = ["apple","mango","orange"]
phir return me onclick ya kisi pr bhi koi code likh liya ya phir kisi compenent ko bar bar call krwana he to bhi 
return(
<button>{array.map()=>{

    <hello key={indx}/>}

}<button>

ab ye component 3 bar call hoga or iska index number 0 1 2 hoga 

lekin broswer thora confuse ho jata he ke ye sb same hen to ismy difference ke liye hm likhty hen key=indx ke 
index wo wala jo by default map me hota he or osmy index number aty he to broswer me jb sb ke index number different ay gy to wo 
confused nhi hoga
)

////////////**********************************************************************************************************#$

CONDITION RENDERING
Iska matlab yeh hota hai ke hum kisi condition (jaise if-else ya ternary operator) ko HTML me direct className ya attributes ke andar use kar sakte hain. Matlab, agar koi condition true ho, to ek class apply hogi (css jesy bg-red :bg-blue), aur agar false ho to doosri class apply hogi. Is tarah ke techniques ko hum TypeScript ke sath bhi implement kar sakte hain jab hum React ya kisi frontend framework ka istemal karte hain.


